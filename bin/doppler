#!/usr/bin/env python
#
# Script to run doppler.fit() on a spectrum

import os
import time
import doppler
from astropy.io import fits
from astropy.table import Table
from argparse import ArgumentParser
from dlnpyutils import utils as dln
import subprocess

# Main command-line program
if __name__ == "__main__":
    parser = ArgumentParser(description='Run Doppler fitting on spectra')
    parser.add_argument('files', type=str, nargs='*', help='Spectrum FITS files')
    parser.add_argument('--outfile', type=str, nargs=1, default='', help='Output filename')
    parser.add_argument('--figfile', type=str, nargs=1, default='', help='Figure filename')
    parser.add_argument('-d','--outdir', type=str, nargs=1, default='', help='Output directory')        
    parser.add_argument('-l','--list', type=str, nargs=1, default='', help='Input list of FITS files')
    parser.add_argument('-j','--joint', action='store_true', help='Joint fit all the spectra')
    parser.add_argument('--snrcut', type=float, default=10.0, help='S/N threshold to fit spectrum separately')    
    parser.add_argument('-p','--plot', action='store_true', help='Save the plots')
    parser.add_argument('-m','--mcmc', action='store_true', help='Run MCMC when fitting spectra individually')
    parser.add_argument('-r','--reader', type=str, nargs=1, default='', help='The spectral reader to use')
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')    
    args = parser.parse_args()

    t0 = time.time()
    files = args.files
    inpoutfile = dln.first_el(args.outfile)
    inpfigfile = dln.first_el(args.figfile)
    outdir = dln.first_el(args.outdir)
    if outdir == '': outdir = None
    joint = args.joint
    snrcut = args.snrcut
    verbose = args.verbose
    mcmc = args.mcmc
    reader = dln.first_el(args.reader)
    if reader == '': reader = None
    saveplot = args.plot
    inlist = dln.first_el(args.list)

    # Load files from a list
    if (len(files)==0) & (inlist!=''):
        # Check that file exists
        if os.path.exists(inlist) is False:
            raise ValueError(inlist+' NOT FOUND')
        # Read in the list
        files = dln.readlines(inlist)
    nfiles = len(files)

    # Outfile and figfile can ONLY be used with a SINGLE file or JOINT fitting
    if (inpoutfile!='') & (nfiles>1) & (joint is False):
        raise ValueError('--outfile can only be used with a SINGLE input file or JOINT fitting')
    if (inpfigfile!='') & (nfiles>1) & (joint is False):
        raise ValueError('--figfile can only be used with a SINGLE input file or JOINT fitting')

    # Fitting individual spectra
    #---------------------------
    if (joint is False) | (nfiles==1):
    
        if (verbose is True) & (nfiles>1):
            print('--- Running Doppler Fit on %d spectra ---' % nfiles)
        
        # Loop over the files
        for i,f in enumerate(files):
            # Check that the file exists
            if os.path.exists(f) is False:
                print(f+' NOT FOUND')
                continue

            # Load the spectrum
            spec = doppler.read(f,format=reader)
            spec = doppler.utils.specprep(spec)  # mask and normalize            
    
            if (verbose is True):
                if (nfiles>1):
                    if (i>0): print('')
                    print('Spectrum %3d:  %s  S/N=%6.1f ' % (i+1,f,spec.snr))
                else:
                    print('%s  S/N=%6.1f ' % (f,spec.snr))

            # Save the figure
            if (nfiles==1) & (inpfigfile!=''):
                figfile = inpfigfile
            if (inpfigfile=='') & (saveplot is True):
                fdir,base,ext = doppler.utils.splitfilename(f)
                figfile = base+'_dopfit.png'
                if outdir is not None: figfile = outdir+'/'+figfile
                if (outdir is None) & (fdir != ''): figfile = fdir+'/'+figfile 
                
            # Run Doppler
            out, model, specm = doppler.fit(spec,mcmc=mcmc,figfile=figfile,verbose=verbose)
            
            # Save the output
            if inpoutfile!='':
                outfile = inpoutfile
            else:
                fdir,base,ext = doppler.utils.splitfilename(f)
                outfile = base+'_doppler.fits'
                if outdir is not None: outfile = outdir+'/'+outfile
                if (outdir is None) & (fdir != ''): outfile = fdir+'/'+outfile
            if verbose is True:
                print('Writing output to '+outfile)
            if os.path.exists(outfile): os.remove(outfile)
            Table(out).write(outfile)
            # append best model
            hdulist = fits.open(outfile)
            hdu = fits.PrimaryHDU(model.flux)
            hdulist.append(hdu)
            hdulist.writeto(outfile,overwrite=True)
            hdulist.close()

            # Add SPECM??

    # Joint fitting
    #--------------
    else:

        # Default output filename
        if inpoutfile=='':
            fdir,base,ext = doppler.utils.splitfilename(files[0])
            outfile = base+'_doppler.fits'
            if outdir is not None: outfile = outdir+'/'+outfile
            if (outdir is None) & (fdir != ''): outfile = fdir+'/'+outfile
        else:
            outfile = inpoutfile
            
        if verbose is True:
            print('--- Running Doppler Jointfit on '+str(len(files))+' spectra ---')
            print('')
            
        # Load the spectra
        if verbose is True: print('Loading the spectra')
        speclist = []
        for i,f in enumerate(files):
            # Check that the file exists
            if os.path.exists(f) is False:
                raise ValueError(f+' NOT FOUND')

            # Load the spectrum
            spec = doppler.read(f,format=reader)
            spec = doppler.utils.specprep(spec)  # mask and normalize

            if verbose is True:
                print('Spectrum %3d:  %s  S/N=%6.1f ' % (i+1,f,spec.snr))
          
            # Append to the list
            speclist.append(spec)
    
        # Run Doppler jointfit()
        if verbose is True: print('')
        sumstr, final, model, specmlist = doppler.jointfit(speclist,mcmc=mcmc,saveplot=saveplot,snrcut=snrcut,verbose=verbose,outdir=outdir)

        # Save the output
        if verbose is True:
            print('Writing output to '+outfile)
        if os.path.exists(outfile): os.remove(outfile)
        # Summary average values
        Table(sumstr).write(outfile)
        # append other items
        hdulist = fits.open(outfile)
        # append final values for each spectrum
        hdu = fits.table_to_hdu(Table(final))
        hdulist.append(hdu)
        # append best model
        # there's a model for each spectrum, each one gets an extension
        for i,m in enumerate(model):
            hdu = fits.PrimaryHDU(m.flux)
            hdulist.append(hdu)
        hdulist.writeto(outfile,overwrite=True)
        hdulist.close()

        # Save the best-fitting plots
        if saveplot is True:
            if verbose is True:
                print('')
                print('Making best-fit plots for each spectrum')
            pdfnames = []
            for i,f in enumerate(files):
                # Figure the output figure filename
                fdir,base,ext = doppler.utils.splitfilename(speclist[i].filename)
                figname = base+'_dopjointfit.png'
                if outdir is not None: figname = outdir+'/'+figname
                if (outdir is None) & (fdir != ''): figname = fdir+'/'+figname
                # Make the plot
                spec = speclist[i]
                specm = specmlist[i]
                fmodel = model[i]
                fout = final[i]
                # Apply continuum tweak to original spectrum as well
                cratio = specm.cont/spec.cont
                orig = spec.copy()
                orig.flux /= cratio
                orig.err /= cratio
                orig.cont *= cratio    
                doppler.rv.specfigure(figname,specm,fmodel,fout,original=orig,verbose=True)
                # Make a PDF version that we will combine at the end
                fignamepdf = figname.replace('.png','.pdf')
                doppler.rv.specfigure(fignamepdf,specm,fmodel,fout,original=orig,verbose=False)
                pdfnames.append(fignamepdf)
            # Combine the PDFs into one
            fdir,base,ext = doppler.utils.splitfilename(files[0])
            combname = base+'_dopjointfit_comb.pdf'  # png
            if outdir is not None: combname = outdir+'/'+combname
            if (outdir is None) & (fdir != ''): combname = fdir+'/'+combname
            if os.path.exists(combname): os.remove(combname)
            cmd = ['gs','-dBATCH','-dNOPAUSE','-q','-sDEVICE=pdfwrite','-sOutputFile='+combname]
            cmd = cmd+pdfnames
            try:
                out = subprocess.call(cmd,stderr=subprocess.STDOUT,shell=False)
                if verbose: print('Combined plots saved to '+combname)
            except subprocess.CalledProcessError:
                raise Exception("Could not combine PDFs with ghostscript")
            # Delete individual PDFs
            for fp in pdfnames: os.remove(fp)
