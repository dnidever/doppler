#!/usr/bin/env python
#
# Script to run doppler.fit() on a spectrum

import os
import time
import doppler
from astropy.io import fits
from astropy.table import Table
from argparse import ArgumentParser

# Main command-line program
if __name__ == "__main__":
    parser = ArgumentParser(description='Run Doppler Fit on a spectrum')
    parser.add_argument('files', type=str, nargs='*', help='Spectrum FITS files')
    parser.add_argument('--outfile', type=str, default='', help='Output filename')
    parser.add_argument('--figfile', type=str, nargs=1, default='', help='Figure filename')    
    parser.add_argument('-l','--list', type=str, default='', help='Input list of FITS files')
    parser.add_argument('-p','--plot', action='store_true', help='Save the plots')
    parser.add_argument('-m','--mcmc', action='store_true', help='Run MCMC when fitting spectra individually')  
    parser.add_argument('-v','--verbose', action='store_true', help='Verbose output')    
    args = parser.parse_args()

    t0 = time.time()
    files = args.files
    inpoutfile = args.outfile
    inpfigfile = args.figfile
    verbose = args.verbose
    mcmc = args.mcmc
    saveplot = args.plot
    inlist = args.list

    # Load files from a list
    if (len(files)==0) & (inlist!=''):
        # Check that file exists
        if os.path.exists(inlist) is False:
            raise ValueError(inlist+' NOT FOUND')
        # Read in the list
        files = dln.readlines(inlist)
    nfiles = len(files)

    # Outfile and figfile can ONLY be used with a SINGLE file
    if (inpoutfile!='') & (nfiles>1):
        raise ValueError('--outfile can only be used with a SINGLE input file')
    if (inpfigfile!='') & (nfiles>1):
        raise ValueError('--figfile can only be used with a SINGLE input file')    

    if (verbose is True) & (nfiles>1):
        print('--- Running Doppler Fit on %d spectra ---' % nfiles)
        
    # Loop over the files
    for i,f in enumerate(files):
        # Check that the file exists
        if os.path.exists(f) is False:
            print(f+' NOT FOUND')
            continue

        # Load the spectrum
        spec = doppler.read(f)
        spec.normalize()
    
        if (verbose is True):
            if (nfiles>1):
                if (i>0): print('')
                print('Spectrum %3d:  %s  S/N=%6.1f ' % (i+1,f,spec.snr))
            else:
                print('%s  S/N=%6.1f ' % (f,spec.snr))

        # Save the figure
        if (nfiles==1) & (inpfigfile!=''):
            figfile = inpfigfile
        if (inpfigfile=='') & (saveplot is True):
            fdir,base,ext = doppler.utils.splitfilename(f)
            figfile = base+'_dopfit.png'
            if fdir != '': figfile = fdir+'/'+figfile 
                
        # Run Doppler
        out, model, specm = doppler.fit(spec,mcmc=mcmc,figfile=figfile,verbose=verbose)
            
        # Save the output
        if inpoutfile!='':
            outfile = inpoutfile
        else:
            fdir,base,ext = doppler.utils.splitfilename(f)
            outfile = base+'_dopfit.fits'
            if fdir != '': outfile = fdir+'/'+outfile
        if verbose is True:
            print('Writing output to '+outfile)
        if os.path.exists(outfile): os.remove(outfile)
        Table(out).write(outfile)
        # append best model
        hdulist = fits.open(outfile)
        hdu = fits.PrimaryHDU(model.flux)
        hdulist.append(hdu)
        hdulist.writeto(outfile,overwrite=True)
        hdulist.close()

        # Add SPECM??
